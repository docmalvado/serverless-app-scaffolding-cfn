AWSTemplateFormatVersion: 2010-09-09 
Description: Deploy a ECS + Fargate common resources.
Parameters:
  project:
    Type: String
  environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - qa
      - prod
  cfnBucketName:
    Type: String
  loadBalancerPort:
    Type: Number
    Default: 80
  publicLB:
    Type: String
    Description: Do you want the load balancer facing internet?
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
  useHTTPS:
    Type: String
    Description: Do you want to use HTTPS certificate?
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
  backendSubDomain:
    Type: String
    Description: "Subdomain for the backend, E.g: api"
    Default: api
Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: Project Information
        Parameters:
          - project
          - environment
      - Label:
          default: Other information
        Parameters:
          - cfnBucketName
          - loadBalancerPort
          - publicLB
          - useHTTPS
          - backendSubDomain
    ParameterLabels:
      project:
        default: "Project's name:"
      environment:
        default: "Project's environment:"
      cfnBucketName:
        default: "Cloudformation bucket:"
      loadBalancerPort:
        default: "Load balancer port:"
      backendSubDomain:
        default: "Backend subdomain:"
      publicLB:
        default: "Is the LB Public?"
      useHTTPS:
        default: "Use HTTPS?"
Conditions:
  isPublicLB: !Equals 
    - !Ref publicLB
    - 'true'
Resources:
  ECSCluster:
    Type: AWS::CloudFormation::Stack
    Properties: 
      TemplateURL: !Sub https://s3.amazonaws.com/${cfnBucketName}/${project}/backend/cluster/modules/ecs-cluster.yml
      Parameters: 
        environment: !Ref environment
        project: !Ref project
        vpcId: 
          Fn::ImportValue:
            !Sub ${project}-base-vpcId

  DNSNamespace:
    Type: AWS::CloudFormation::Stack
    Properties: 
      TemplateURL: !Sub https://s3.amazonaws.com/${cfnBucketName}/${project}/backend/cluster/modules/dns-namespace.yml
      Parameters: 
        environment: !Ref environment
        project: !Ref project
        namespace: !Sub "${project}.net"
        vpcId:
          Fn::ImportValue:
            !Sub ${project}-base-vpcId
  
  LoadBalancer:
    Type: AWS::CloudFormation::Stack
    Properties: 
      TemplateURL: !Sub https://s3.amazonaws.com/${cfnBucketName}/${project}/backend/cluster/modules/load-balancer.yml
      Parameters: 
        environment: !Ref environment
        project: !Ref project
        vpcId:
          Fn::ImportValue:
            !Sub ${project}-base-vpcId
        lbSubnetsIdList: 
          Fn::ImportValue:
            !If [isPublicLB, !Sub "${project}-base-publicSubnetsIdList", !Sub "${project}-base-privateSubnetsIdList"]
        loadBalancerPort: !Ref loadBalancerPort
        publicLB: !Ref publicLB
        useHTTPS: !Ref useHTTPS
        certificateARN:
          Fn::ImportValue:
            !Sub "${project}-${environment}-shared-certificateARN"
        hostedZoneId:
          Fn::ImportValue:
            !Sub "${project}-${environment}-shared-hostedZoneId"
        loadbalancerDomainName:
          Fn::Sub:
            - ${backendSubDomain}.${domainName}
            - backendSubDomain: !Ref backendSubDomain
              domainName:
                Fn::ImportValue:
                  !Sub "${project}-${environment}-shared-hostedZoneName"

  TokensSecret:
    Type: AWS::CloudFormation::Stack
    Properties: 
      TemplateURL: !Sub https://s3.amazonaws.com/${cfnBucketName}/${project}/backend/cluster/modules/secrets-manager.yml
      Parameters: 
        project: !Ref project
        name: tokens
        secretTemplate: |
          {
            "DOCKER_HUB_USER": "",
            "DOCKER_HUB_TOKEN": ""
          }

Outputs:
  clusterName:
    Description: Cluster Name
    Value: !GetAtt ECSCluster.Outputs.clusterName
    Export:
      Name: !Sub '${project}-${environment}-cluster-clusterName'
  clusterARN:
    Description: Cluster ARN
    Value: !GetAtt ECSCluster.Outputs.clusterARN
    Export:
      Name: !Sub '${project}-${environment}-cluster-clusterARN'
  autoScalingRoleName:
    Description: Auto Scaling Role Name
    Value: !GetAtt ECSCluster.Outputs.autoScalingRoleName
    Export:
      Name: !Sub '${project}-${environment}-cluster-autoScalingRoleName'
  autoScalingRoleARN:
    Description: Auto Scaling Role ARN
    Value: !GetAtt ECSCluster.Outputs.autoScalingRoleARN
    Export:
      Name: !Sub '${project}-${environment}-cluster-autoScalingRoleARN'
  executionRoleARN:
    Description: Execution Role ARN
    Value: !GetAtt ECSCluster.Outputs.executionRoleARN
    Export:
      Name: !Sub '${project}-${environment}-cluster-executionRoleARN'
  containerInternalSecurityGroupId:
    Description: Container Internal Security Group Id
    Value: !GetAtt ECSCluster.Outputs.containerInternalSecurityGroupId
    Export:
      Name: !Sub '${project}-${environment}-cluster-containerInternalSecurityGroupId'
  loadBalancerEndpoint:
    Description: Endpoint
    Value: !GetAtt LoadBalancer.Outputs.loadBalancerEndpoint
    Export:
      Name: !Sub '${project}-${environment}-cluster-loadBalancerEndpoint'
  loadBalancerSecurityGroupId:
    Description: LB Security Group Id
    Value: !GetAtt LoadBalancer.Outputs.loadBalancerSecurityGroupId
    Export:
      Name: !Sub '${project}-${environment}-cluster-loadBalancerSecurityGroupId'
  loadBalancerListenerARN:
    Description: LB Listener ARN
    Value: !GetAtt LoadBalancer.Outputs.loadBalancerListenerARN
    Export:
      Name: !Sub '${project}-${environment}-cluster-loadBalancerListenerARN'
  namespaceId:
    Description: Namespace Id
    Value: !GetAtt DNSNamespace.Outputs.namespaceId
    Export:
      Name: !Sub '${project}-${environment}-cluster-namespaceId'
  tokensSecretARN:
    Description: Secret ARN
    Value: !GetAtt TokensSecret.Outputs.secretARN
    Export:
      Name: !Sub "${project}-${environment}-cluster-tokensSecretARN"
  tokensSecretName:
    Description: Secret Name
    Value: !GetAtt TokensSecret.Outputs.secretName
    Export:
      Name: !Sub "${project}-${environment}-cluster-tokensSecretName"